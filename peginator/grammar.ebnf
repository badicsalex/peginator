Grammar = {rules:Rule ";"} ;

Rule = {directives:DirectiveExpression} name:Identifier "=" definition:Choice;

Choice = choices:Sequence {"|" choices:Sequence};

Sequence = { parts:DelimitedExpression };

Group = "(" body:Choice ")";

Optional = "[" body:Choice "]";

Closure = "{" body:Choice "}" [at_least_one:AtLeastOneMarker];
AtLeastOneMarker = '+';

NegativeLookahead = "!" expr:*DelimitedExpression;

CharacterRange = from:CharacterLiteral ".." to:CharacterLiteral;

CharacterLiteral = "'" @:char "'";

StringLiteral = '"' body:StringLiteralBody '"';

@string
@no_skip_ws
StringLiteralBody = { "\\\"" | !'"' char };

Field = [name:Identifier ":" [boxed:BoxMarker]] typ:Identifier;

BoxMarker = '*';

OverrideField = "@" ":" typ:Identifier;

DelimitedExpression =
    @:Group |
    @:Optional |
    @:Closure |
    @:NegativeLookahead |
    @:CharacterRange |
    @:CharacterLiteral |
    @:StringLiteral |
    @:OverrideField |
    @:Field
;


@string
@no_skip_ws
Identifier = {'a'..'z' | 'A'..'Z' | '0'..'9' | '_'}+;

DirectiveExpression = @:StringDirective | @:NoSkipWsDirective;
StringDirective = "@string";
NoSkipWsDirective = "@no_skip_ws";
